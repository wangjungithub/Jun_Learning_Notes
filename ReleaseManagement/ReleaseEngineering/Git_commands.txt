
------------------------------------------------------------
Differences between different git pull commands

(1) `git pull origin master`
	will pull changes from the origin remote, master branch and merge them to the local checked-out branch. In which case the "remote cached copy" (see below) is not updated - you reach out directly and don't touch the reference

(2) `git pull origin/master`
	will pull changes from the locally stored branch origin/master and merge that to the local checked-out branch. The origin/master branch is essentially a "cached copy" of what was last pulled from origin, which is why it's called a remote branch in git parlance. This might be somewhat confusing.

(3) `git pull`
	means `git fetch` followed by `git merge`. It fetches the content from the remote (updating the "cached copy"), then merges it into your current branch.


So in (1) you're grabbing something directly from "far away" vs (2) grabbing stuff from your cached copy of what is "far away" vs (3) having get fetch the remote content, update the local cache and then merge from that.


At least, I think that's it :D

Sources:
1. http://stackoverflow.com/questions/8689054/git-pull-origin-master-does-not-update-origin-master
2. http://stackoverflow.com/questions/2883840/differences-between-git-pull-origin-master-git-pull-origin-master



------------------------------------------------------------
How to delete commits already pushed?

Careful: git reset --hard WILL DELETE YOUR WORKING DIRECTORY CHANGES

Assuming you are sitting on that commit, then this command will wack it...

git reset --hard HEAD~1
The HEAD~1 means the commit before head.

Or, you could look at the output of git log, find the commit id of the commit
you want to back up to, and then do this:

git reset --hard <sha1-commit-id>
If you already pushed it, you will need to do a force push to get rid of it...

git push origin HEAD --force
However, if others may have pulled it, then you would be better off starting a
new branch. Because when they pull, it will just merge it into their work, and
you will get it pushed back up again.

If you already pushed, it may be better to use git revert, to create a "mirror
image" commit that will undo the changes. However, both commits will both be
in the log.

FYI -- git reset --hard HEAD is great if you want to get rid of WORK IN
PROGRESS. It will reset you back to the most recent commit, and erase all the
changes in your working tree and index.

Lastly, if you need to find a commit that you "deleted", it is typically
present in git reflog unless you have garbage collected your repository.


------------------------------------------------------------
